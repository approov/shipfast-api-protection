#!/bin/bash

set -eu

Show_Help() {
    printf "\n Shipfast API:\n"
    printf "\t./shipfast up api\n"
    printf "\t./shipfast restart api\n"
    printf "\t./shipfast down api\n"

    printf "\n Shipraider Web:\n"
    printf "\t./shipfast up web\n"
    printf "\t./shipfast restart web\n"
    printf "\t./shipfast down web\n"

    printf "\n Android Studio:\n"
    printf "\t./shipfast up editor\n"
    printf "\t./shipfast restart editor\n"
    printf "\t./shipfast down editor\n"

    printf "\n Logs:\n"
    printf "\t./shipfast logs api\n"
    printf "\t./shipfast logs web\n"
    printf "\t./shipfast logs\n"
}

Start_Editor() {

    local _ca_crt_file="./docker/demo/setup/certificates/ProxyCA.crt"
    local _ca_pem_dir="/etc/ssl/certs"
    local _ca_pem_filename="ProxyCA.pem"
    local _ca_pem_file="${_ca_pem_dir}/${_ca_pem_filename}"
    local _ca_name="ProxyCA"

    if [ ! -f "./app/android/kotlin/ShipFast/approov/approov.aar" ]; then
        printf "\n\n ---> Approov library is missing. Add it with:\n approov sdk -getLibrary ./app/android/kotlin/ShipFast/approov/approov.aar \n\n"
    fi

    # KVM needs to change permissions in order for Android Studio can work.
    # For some reason the permissions return to original state after we close the editor
    # TODO: find a permanent solution
    ${ROOT_PREFIX} chown ${_USER}:${_USER} /dev/kvm

    ${DOCKER_COMPOSE} up -d shipfast-demo

    #cp -v "${CA_PEM_FILE}" /var/www/html/proxy.crt

    #if [ -f "${_ca_crt_file}" ]
    #    then
            #sleep 5
    #        printf "\n>>> ADDING PROXY CERTIFICATE <<<\n"

            #${DOCKER_COMPOSE} exec -d -u root shipfast-demo bash -c "/demo/ssl/add-certificates.sh ${_ca_pem_dir} ${_ca_pem_filename} ${_ca_name} && cp ${_ca_pem_file} /var/www/html/proxy.crt"
    #fi
}

Restart_Editor() {
    Destroy_Editor && Start_Editor
}

Destroy_Editor() {
    ${DOCKER_COMPOSE} stop shipfast-demo
    ${DOCKER_COMPOSE} rm shipfast-demo
}

Start_Api_Server() {

    # From the android emulator we must use 10.0.2.2:3333 to call localhost

    if [ ! -d "./server/shipfast-api/node_modules" ]; then
        ${DOCKER_COMPOSE} run shipfast-api sh -c 'npm install && exit || exit'
    fi

    ${DOCKER_COMPOSE} up -d shipfast-api
}

Restart_Api_Server() {
    Destroy_Api_Server && Start_Api_Server
}

Destroy_Api_Server() {
    ${DOCKER_COMPOSE} stop shipfast-api
    ${DOCKER_COMPOSE} rm shipfast-api
}

Start_Web_Server() {

    if [ ! -d "./server/shipraider-rogue-web/node_modules" ]; then
        ${DOCKER_COMPOSE} run shipraider-web sh -c 'npm install && exit || exit'
    fi

    ${DOCKER_COMPOSE} up -d shipraider-web
}

Restart_Web_Server() {
    Destroy_Web_Server && Start_Web_Server
}

Destroy_Web_Server() {
    ${DOCKER_COMPOSE} stop shipraider-web
    ${DOCKER_COMPOSE} rm shipraider-web
}

Logs() {
    ${DOCKER_COMPOSE} logs ${@}
}

Main() {

    local ROOT_PREFIX=""

    local DOCKER_COMPOSE=$(which docker-compose)

    local _USER="$(id -un)"

    local LINES=""

    local ANDROID_STUDIO_VERSION=3.5.1.0
    local ANDROID_STUDIO_MAJOR_VERSION=3.5

    local PROJECT_DIR="${PWD#*${HOME}/}"
    local PROJECT_NAME="${PROJECT_DIR//\//_}"

    #PROJECT_HOST_DIR="${HOME}/.docker-shipfast-demo/${PROJECT_NAME//\//_}"
    local PROJECT_HOST_DIR="${HOME}/.docker-shipfast-demo"

    # Auto detect if we need to use sudo
    if type sudo &> /dev/null; then
        ROOT_PREFIX=sudo
    fi

    # Sometimes we may have sudo in our system, but to run `docker-compose` it
    #  will not find the executable with sudo, I am looking at you AWS EC2, thus
    #  we can customize it.
    if [ -f ./.shipfast.local.vars ]; then
        source ./.shipfast.local.vars
    fi

    DOCKER_COMPOSE="${ROOT_PREFIX} ${DOCKER_COMPOSE}"

    local APPROOV_INITIAL_CONFIG=./app/android/kotlin/ShipFast/app/src/main/assets/approov-initial.config
    local APPROOV_SDK=./app/android/kotlin/ShipFast/approov/approov.aar

    ./docker/setup/docker-volumes-dirs.sh "${PROJECT_NAME}" "${PROJECT_HOST_DIR}" "${ANDROID_STUDIO_MAJOR_VERSION}"

    if [ ! -f ./.env ]; then
        printf "\n---> FATAL ERROR: Missing .env file <---\n"
        exit 1
    fi

    # Setup X11 server authentication
    # @link https://wiki.ros.org/docker/Tutorials/GUI#The_isolated_way
    if type xauth &> /dev/null; then
        _XAUTH="${PROJECT_HOST_DIR}"/.X11-unix.xauth
        touch "${_XAUTH}"
        xauth nlist "${DISPLAY}" | sed -e 's/^..../ffff/' | xauth -f "${_XAUTH}" nmerge -
    fi

    # Updates the env var PROJECT_NAME
    if grep -q "PROJECT_NAME" .env && ! grep -q "${PROJECT_NAME}" .env
        then
            while IFS= read -r line
            do
                case "${line}" in
                   "PROJECT_NAME"*) LINES="${LINES}PROJECT_NAME=${PROJECT_NAME}\n" ;;
                   *) LINES="${LINES}${line}\n" ;;
                esac
            done < .env

            if [ ! -z ${LINES} ]
                then
                    printf "${LINES}" > .env
            fi
    fi

    # Updates the env var PROJECT_HOST_DIR
    if grep -q "PROJECT_HOST_DIR" .env && ! grep -q "${PROJECT_HOST_DIR}" .env
        then
            while IFS= read -r line
            do
                case "${line}" in
                   "PROJECT_HOST_DIR"*) LINES="${LINES}PROJECT_HOST_DIR=${PROJECT_HOST_DIR}\n" ;;
                   *) LINES="${LINES}${line}\n" ;;
                esac
            done < .env

            if [ ! -z ${LINES} ]
                then
                    printf "${LINES}" > .env
            fi
    fi

    # Creates the env var PROJECT_NAME
    if ! grep -q "${PROJECT_NAME}" .env
        then
            printf "\nPROJECT_NAME=${PROJECT_NAME}\n" >> .env
    fi

    # Creates the env var PROJECT_HOST_DIR
    if ! grep -q "${PROJECT_HOST_DIR}" .env
        then
            printf "\nPROJECT_HOST_DIR=${PROJECT_HOST_DIR}\n" >> .env
    fi


    for input in  "${@}"; do
        case "${input}" in
            -h | --help | help )
                Show_Help
                exit $?
            ;;

            down )
                case "${2:-}" in
                    api )
                        Destroy_Api_Server
                    ;;

                    editor )
                        Destroy_Editor
                    ;;

                    web )
                        Destroy_Web_Server
                    ;;

                    * )
                        Show_Help
                    ;;
                esac

                exit $?
            ;;

            logs )
                case "${2:-}" in
                    api )
                        Logs "-f" "shipfast-api"
                    ;;

                    editor )
                        Logs "-f" "shipfast-demo"
                    ;;

                    web )
                        Logs "-f" "shipraider-web"
                    ;;

                    * )
                        Logs "-f"
                    ;;
                esac

                exit $?
            ;;

            restart )
                case "${2:-}" in
                    api )
                        Restart_Api_Server
                    ;;

                    editor )
                        Restart_Editor
                    ;;

                    web )
                        Restart_Web_Server
                    ;;

                    * )
                        Show_Help
                    ;;
                esac

                exit $?
            ;;

            up )
                case "${2:-}" in
                    api )
                        Start_Api_Server
                    ;;

                    editor )
                        Start_Editor
                    ;;

                    web )
                        Start_Web_Server
                    ;;

                    * )
                        Show_Help
                    ;;
                esac

                exit $?
            ;;

        esac
    done

    Show_Help

    exit $?
}

Main ${@}
